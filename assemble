#!/usr/bin/env bash
#
# ------------------------>% Thoth related content %<------------------------
#
THOTH_ASSEMBLE_DEBUG=${THOTH_ASSEMBLE_DEBUG:-0}
[[ ${THOTH_ASSEMBLE_DEBUG} -eq 0 ]] || set -e

# Submit stack to Thoth, but do not use the recommended one:
THOTH_DRY_RUN=${THOTH_DRY_RUN:-0}
# Force advises even if Pipfile.lock is present in the repo:
THOTH_ADVISE=${THOTH_ADVISE:-1}
# Use Thamos from git instead of a PyPI release:
THOTH_FROM_MASTER=${THOTH_FROM_MASTER:-0}
# Thoth host to submit recommendations to:
THOTH_HOST=${THOTH_HOST:-khemenu.thoth-station.ninja}
# Disable progressbar for thamos:
THAMOS_NO_PROGRESSBAR=${THAMOS_NO_PROGRESSBAR:-1}
# Fallback to Pipfile.lock present in the repo if analysis fails.
THOTH_ERROR_FALLBACK=${THOTH_ERROR_FALLBACK:-0}

# A directory where s2i places sources.
pushd /tmp/src

echo "Configuration for Thoth"
echo "=========================="
echo "THOTH_ASSEMBLE_DEBUG:    ${THOTH_ASSEMBLE_DEBUG}"
echo "THOTH_DRY_RUN:           ${THOTH_DRY_RUN}"
echo "THOTH_ADVISE:            ${THOTH_ADVISE}"
echo "THOTH_FROM_MASTER:       ${THOTH_FROM_MASTER}"
echo "THOTH_HOST:              ${THOTH_HOST}"
echo "THAMOS_NO_PROGRESSBAR:   ${THAMOS_NO_PROGRESSBAR}"
echo "THOTH_ERROR_FALLBACK:    ${THOTH_ERROR_FALLBACK}"
echo "=========================="

# Make a backup of the Pipfile.lock present in the git root.
[[ ${THOTH_DRY_RUN} -ne 0 && -f Pipfile.lock ]] && cp Pipfile.lock ../

function restore_pipfile_lock() {
  [[ -f ../Pipfile.lock ]] && cp ../Pipfile.lock .
}

[[ ( -f Pipfile && ! -f Pipfile.lock ) || ${THOTH_ADVISE} -ne 0 ]] && {
  echo "Updating pip and installing Thamos..."
  # Enable pip3.
  pip install --upgrade pip || exit 1

  if [[ ${THOTH_FROM_MASTER} -eq 1 ]]; then
      pip3 install git+https://github.com/thoth-station/thamos || exit 1
      pip3 install git+https://github.com/thoth-station/invectio || exit 1
  else
      pip3 install thamos || exit 1
  fi

  echo ">>> Performing hardware and software discovery..."
  thamos config --no-interactive || exit 1
  echo ">>> Thoth's configuration file after hardware and software discovery:"
  cat .thoth.yaml
  echo ">>> Asking Thoth for advise..."
  if [[ ${THOTH_DRY_RUN} -ne 0 ]]; then
    thamos advise || {
      if [[ ${THOTH_ERROR_FALLBACK} -ne 0 ]]; then
        echo "Thoth stack analysis failed, restoring previous Pipfile.lock"
        restore_pipfile_lock
      else
        echo "Thoth stack analysis failed, this build will fail shortly..." >&2
        exit 1
      fi
    }
  else
    thamos advise --no-wait || {
      [[ ${THOTH_ERROR_FALLBACK} -eq 0 ]] && exit 1
    }
  fi
} || {
  echo "Thoth advises are not activated"
}

# Restore previous Pipfile.lock, do not use the original one on dry run.
[[ ${THOTH_DRY_RUN} -ne 0 ]] && {
  echo "Restoring previous Pipfile.lock as THOTH_DRY_RUN was set" >&2
  restore_pipfile_lock
}

# Show Pipfile.lock on debug.
[[ ${THOTH_ASSEMBLE_DEBUG} -ne 0 ]] && cat Pipfile.lock

popd

# Uncomment if you want to use this script solely in an s2i as an extension:
#exec /usr/libexec/s2i/assemble
#
# ------------------------>% Thoth related content %<------------------------
#
